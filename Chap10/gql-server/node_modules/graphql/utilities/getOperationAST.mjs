<<<<<<< HEAD
import { Kind } from '../language/kinds.mjs';
=======
import { Kind } from "../language/kinds.mjs";
>>>>>>> efb60b5ba318ea79afa9b17c06eb55420dda5343
/**
 * Returns an operation AST given a document AST and optionally an operation
 * name. If a name is not provided, an operation is only returned if only one is
 * provided in the document.
 */

export function getOperationAST(documentAST, operationName) {
<<<<<<< HEAD
  let operation = null;

  for (const definition of documentAST.definitions) {
=======
  var operation = null;

  for (var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++) {
    var definition = _documentAST$definiti2[_i2];

>>>>>>> efb60b5ba318ea79afa9b17c06eb55420dda5343
    if (definition.kind === Kind.OPERATION_DEFINITION) {
      var _definition$name;

      if (operationName == null) {
        // If no operation name was provided, only return an Operation if there
        // is one defined in the document. Upon encountering the second, return
        // null.
        if (operation) {
          return null;
        }

        operation = definition;
<<<<<<< HEAD
      } else if (
        ((_definition$name = definition.name) === null ||
        _definition$name === void 0
          ? void 0
          : _definition$name.value) === operationName
      ) {
=======
      } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
>>>>>>> efb60b5ba318ea79afa9b17c06eb55420dda5343
        return definition;
      }
    }
  }

  return operation;
}
